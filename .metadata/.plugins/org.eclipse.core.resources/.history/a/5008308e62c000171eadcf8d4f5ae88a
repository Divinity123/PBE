package database;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.LineNumberReader;

import combinatorialSolver.Solver;

import java.util.*;

/* Class to read, write and process databases */
public class Database implements DB_operations {

	/* main structures to work with */
	String[][] db;
	Integer[][] edb;
	List<Attribute[]> attCountsCols;
	int[] mergeSizes;
	Integer mergeSizesMax;
	Integer mergeSizesMaxIdx;
	Integer[] mergeShifts;
	List<HashMap<String, Integer>> encodings;
	
	NumAttribute[] attCounts;
	Integer[] rawAttCount;
	Integer[] paddedAttCount;
	
	List<Integer[]> assignments;
	
	
	
	@Override
	public boolean readDB(String fileName, int[] columns) {
		File file = new File(fileName);
		try 
		{
			/* Get number of lines in the file */
			LineNumberReader  lnr = new LineNumberReader(new FileReader(new File(fileName)));
			lnr.skip(Long.MAX_VALUE);
			int lineNumber = lnr.getLineNumber();
			lnr.close();

			Scanner scanner = new Scanner(file);
			scanner.nextLine();

			db = new String[lineNumber][columns.length];
			
			int rowIdx = 0;
			while (scanner.hasNextLine())
			{
				String[] line = scanner.nextLine().split("\t");
				for (int ii = 0; ii < columns.length; ii++)
					db[rowIdx][ii] = line[columns[ii]];
				
				rowIdx++;
			}
			
			return true;
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
			return false;
		}
	}
	
	@Override
	public void getHistogram() {
		/* Use hashmap to count frequency of each attribute */
		HashMap<String, Integer> attributeSet = new HashMap<String, Integer>();
		for (int ii = 0; ii < edb.length; ii++)
		{
			String attribute = combineAttributes(edb[ii]);
			if (attributeSet.containsKey(attribute))
				attributeSet.put(attribute, attributeSet.get(attribute) + 1);
			else
				attributeSet.put(attribute, 1);
		}
		
		/* Put result into a list */
		Object[] keys = attributeSet.keySet().toArray();
		Object[] vals = attributeSet.values().toArray();
		
		attCounts = new NumAttribute[keys.length];
		for (int ii = 0; ii < keys.length; ii++)
		{
			NumAttribute att = new NumAttribute(Integer.parseInt((String) keys[ii]), (Integer) vals[ii]);
			attCounts[ii]    = att;
		}
		
		/* Update the array version of counts */
		int attSizeMax = mergeSizes[0] * mergeShifts[0];
		rawAttCount = new Integer[attSizeMax];
		for (int ii = 0; ii < attSizeMax; ii++)
			rawAttCount[ii] = 0;
		for (int ii = 0; ii < keys.length; ii++)
			rawAttCount[Integer.parseInt((String) keys[ii])] = (Integer) vals[ii];
		
		
		/* Sort array */
		Arrays.sort(attCounts, Comparator.comparing((NumAttribute att) -> att.getCount()).reversed());
	}
	
	
	@Override
	public void getHistogramColumn(Integer column)
	{
		String[] dbCol = new String[db.length];
		for (int ii = 0; ii < db.length; ii++)
			dbCol[ii] = db[ii][column];
		
		HashMap<String, Integer> attributeSet = new HashMap<String, Integer>();
		for (int ii = 0; ii < db.length; ii++)
		{
			if (attributeSet.containsKey(dbCol[ii]))
				attributeSet.put(dbCol[ii], attributeSet.get(dbCol[ii]) + 1);
			else
				attributeSet.put(dbCol[ii], 1);
		}
		
		/* Put result into a list */
		Object[] keys = attributeSet.keySet().toArray();
		Object[] vals = attributeSet.values().toArray();
		
		Attribute[] attCountsCol = new Attribute[keys.length];
		for (int ii = 0; ii < keys.length; ii++)
		{
			Attribute att = new Attribute((String) keys[ii], (Integer) vals[ii]);
			attCountsCol[ii] = att;
		}
		
		/* Sort array and add it to the list */
		Arrays.sort(attCountsCol, Comparator.comparing((Attribute att) -> att.getCount()).reversed());
		attCountsCols.add(attCountsCol);
	}
	
	
	@Override
	public List<NumAttribute> getHistogramColums(Integer column1, Integer column2)
	{
		List<NumAttribute> result = new ArrayList<NumAttribute>();
		
		/* get counts for each joint attribute */
		Integer[][] attributeCounts = new Integer[mergeSizes[column1]][mergeSizes[column2]];
		for (int ii = 0; ii < mergeSizes[column1]; ii++)
			for (int jj = 0; jj < mergeSizes[column2]; jj++)
				attributeCounts[ii][jj] = 0;
		
		for (NumAttribute att: attCounts)
		{
			Integer[] atts = separateAttributes(att.getVal());
			attributeCounts[atts[column1]][atts[column2]] += att.getCount();
		}
		
		for (int ii = 0; ii < mergeSizes[column1]; ii++)
			for (int jj = 0; jj < mergeSizes[column2]; jj++)
				result.add(new NumAttribute(ii*mergeSizes[column2]+jj, attributeCounts[ii][jj]));
				
		result.sort(Comparator.comparing((NumAttribute att) -> att.getCount()).reversed());
		return result;
	}
	
	
		
	@Override
	public int getMinimumPack(Integer[] counts) {
		/* Initialise the bins for the packing problem */
		Integer[] binSizes = new Integer[counts.length];
		for (int ii = 0; ii < binSizes.length; ii++)
			binSizes[ii] = 0;
			
		/* sort counts and packing */
		Arrays.sort(counts, Collections.reverseOrder());
		Integer maxCount = counts[0];
		
		for (int ii = 0; ii < counts.length; ii++)
		{
			int binIdx = 0;
			while (binSizes[binIdx] + counts[ii] > maxCount)
				binIdx++;
			
			binSizes[binIdx] += counts[ii];
		}
		
		/* count the number of non-zero size bins */
		int nonZeroBins = 0;
		for (int ii = 0; ii < binSizes.length; ii++)
			if (binSizes[ii] > 0)
				nonZeroBins++;
		
		return nonZeroBins;
	}
	
	
	@Override
	public int[] getMergeSize(int[] minSizes, int[] maxSizes) {
		int[] solution = new int[minSizes.length];
		
		Integer maxVal = Arrays.stream(minSizes).max().getAsInt();
		Integer maxIdx = 0;
		for (int ii = 0; ii < minSizes.length; ii++)
			if (minSizes[ii] == maxVal)
				maxIdx = ii;
		
		for (int currentVal = minSizes[maxIdx]; currentVal <= maxSizes[maxIdx]; currentVal++)
		{
			for (int idx = 0; idx < minSizes.length; idx++)
			{
				boolean possible = false;
				for (int val = minSizes[idx]; val <= maxSizes[idx]; val++)
				{
					if (currentVal % val == 0)
					{
						solution[idx] = val;
						possible = true;
						break;
					}
				}
				
				if (possible == false)
					break;
				
				if ((idx == minSizes.length - 1) && (possible == true))
				{
					mergeSizesMax = Arrays.stream(solution).max().getAsInt();
					mergeSizesMaxIdx = 0;
					
					
					
					for (int kk = 0; kk < solution.length; kk++)
					{
						if (solution[kk] == mergeSizesMax)
						{
							mergeSizesMaxIdx = kk;
							break;
						}
					}				
					return solution;
				}
			}
		}
				
		return null;
	}
	
	
	/* another way to construct the merge sizes, using powers of base b */
	private int[] getMergeSize2(int[] minSizes, int[] maxSizes) {
		
	}
		
	
	@Override
	public void getEncodings() {
		/* compute column-wise histograms */
		attCountsCols = new ArrayList<Attribute[]>();
		for (int column = 0; column < db[0].length; column++)
			getHistogramColumn(column);

		/* compute minimal packing for each column */
		int[] minSizes = new int[db[0].length];
		int[] maxSizes = new int[db[0].length];
		for (int column = 0; column < db[0].length; column++)
		{
			int attSize = attCountsCols.get(column).length;
			Integer[] counts = new Integer[attSize];
			for (int ii = 0; ii < counts.length; ii++)
				counts[ii] = attCountsCols.get(column)[ii].getCount();
			
			minSizes[column] = getMinimumPack(counts);
			maxSizes[column] = attSize;
		}
		
		mergeSizes = getMergeSize(minSizes, maxSizes);
		encodings = new ArrayList<HashMap<String, Integer>>();
		
		/* compute index shift in each column */
		mergeShifts = new Integer[mergeSizes.length];
		mergeShifts[mergeShifts.length - 1] = 1;
		for (int ii = mergeShifts.length - 2; ii > - 1; ii--)
			mergeShifts[ii] = mergeShifts[ii+1] * mergeSizes[ii+1];
	
		
		for (int column = 0; column < db[0].length; column++)
		{
			/* Initialise objects */
			Integer[] binCaps = new Integer[mergeSizes[column]];
			HashMap<String, Integer> encoding = new HashMap<String, Integer>(); 
			
			/* Fill all bins once before running the algorithm */
			for (int fill = 0; fill < mergeSizes[column]; fill++)
			{
				binCaps[fill] = attCountsCols.get(column)[fill].getCount();
				encoding.put(attCountsCols.get(column)[fill].getString(), fill);
			}
			
			/* Run the bin packing algorithm */
			for (int idx = mergeSizes[column]; idx < attCountsCols.get(column).length; idx++)
			{
				int currentBin = 1;
				while (binCaps[currentBin] + attCountsCols.get(column)[idx].getCount() > binCaps[0])
					currentBin++;
				
				binCaps[currentBin] += attCountsCols.get(column)[idx].getCount();
				encoding.put(attCountsCols.get(column)[idx].getString(), currentBin);
			}
			
			encodings.add(encoding);
		}
	}
		
	
	@Override
	public void encryption() {
		/* simple routine of looking up encodings computed */
		edb = new Integer[db.length][db[0].length];
		
		for (int ii = 0; ii < db.length; ii++)
			for (int jj = 0; jj < db[0].length; jj++)
				edb[ii][jj] = encodings.get(jj).get(db[ii][jj]);
	}
	
	
	@Override
	public void padding()
	{
		/* obtain full histogram */
		getHistogram();
		
		/* initialise data structure to store all column-wise assignments */
		assignments = new ArrayList<Integer[]>();
		
		for (int col = 0; col < mergeSizes.length; col++)
		{
			if (col == mergeSizesMaxIdx)
				assignments.add(new Integer[1]);
			
			else
			{
				//System.out.println("New column");
				List<NumAttribute> colHist = getHistogramColums(mergeSizesMaxIdx, col);
				Solver solver = new Solver(colHist, new Integer[]{mergeSizes[mergeSizesMaxIdx], mergeSizes[col]});
				solver.solve();
				Integer[] assignment = solver.getAssignment();
				assignments.add(assignment);
			}
		}
		
		/*  gather assignments as joint assignment, put them in a hash map */ //definitely wrong atm
		Map<String, List<Integer>> assignmentMap = new HashMap<String, List<Integer>>();
		Integer attMaxSize = mergeSizes[0] * mergeShifts[0];
		for (int attribute = 0; attribute < attMaxSize; attribute++)
		{
			Integer[] attributes = separateAttributes(attribute);
			String assignment = findAssignment(attributes);
			
			if (assignmentMap.containsKey(assignment) == false)
			{
				List<Integer> atts = new ArrayList<Integer>();
				atts.add(attribute);
				assignmentMap.put(assignment, atts);
			}
			else
				assignmentMap.get(assignment).add(attribute);
		}
		
		/* assign padded sizes to each joint assignment */
		Iterator jointAssignments = assignmentMap.values().iterator();
		
		paddedAttCount = new Integer[mergeSizes[0] * mergeShifts[0]];
		while (jointAssignments.hasNext())
		{
			List<Integer> jointAssignment = (List<Integer>) jointAssignments.next();
			
			int padSize = 0;
			for (Integer jointAss: jointAssignment)
				if (rawAttCount[jointAss] > padSize)
					padSize = rawAttCount[jointAss];
			
			for (Integer jointAss: jointAssignment)
				paddedAttCount[jointAss] = padSize;
		}
	}


	public void showMarginalCounts(Integer firstCol, Integer secondCol)
	{
		int[][] countArray = new int[mergeSizes[firstCol]][mergeSizes[secondCol]];
		
		for (int ii = 0; ii < mergeSizes[firstCol]; ii++)
			for (int jj = 0; jj < mergeSizes[secondCol]; jj++)
				countArray[ii][jj] = 0;
		
		for (int idx = 0; idx < paddedAttCount.length; idx++)
		{
			Integer[] att = separateAttributes(idx);
			countArray[att[firstCol]][att[secondCol]] += paddedAttCount[idx];
		}
		
		for (int ii = 0; ii < mergeSizes[firstCol]; ii++)
			for (int jj = 0; jj < mergeSizes[secondCol]; jj++)
				System.out.println("(" + ii + ", " + jj + "): " + countArray[ii][jj]);
	}
	
	
	public void showMarginalCounts(Integer firstCol, Integer secondCol, Integer thirdCol)
	{
		int[][][] countArray = new int[mergeSizes[firstCol]][mergeSizes[secondCol]][mergeSizes[thirdCol]];
		
		for (int ii = 0; ii < mergeSizes[firstCol]; ii++)
			for (int jj = 0; jj < mergeSizes[secondCol]; jj++)
				for (int kk = 0; kk < mergeSizes[thirdCol]; kk++)
					countArray[ii][jj][kk] = 0;
		
		for (int idx = 0; idx < paddedAttCount.length; idx++)
		{
			Integer[] att = separateAttributes(idx);
			countArray[att[firstCol]][att[secondCol]][att[thirdCol]] += paddedAttCount[idx];
		}
		
		for (int ii = 0; ii < mergeSizes[firstCol]; ii++)
			for (int jj = 0; jj < mergeSizes[secondCol]; jj++)
				for (int kk = 0; kk < mergeSizes[thirdCol]; kk++)
					System.out.println("(" + ii + ", " + jj + ", " + kk + "): " + countArray[ii][jj][kk]);
	}
	
	
	/* method to combine attributes of a column */
	private String combineAttributes(Integer[] attributes)
	{
		Integer result = 0;
		for (int ii = 0; ii < attributes.length; ii++)
			result += attributes[ii] * mergeShifts[ii];
		return Integer.toString(result);
	}
	
	
	/* method to separate attributes given the attribute itself */
	private Integer[] separateAttributes(Integer att)
	{
		Integer[] result = new Integer[edb[0].length];
		for (int ii = 0; ii < edb[0].length; ii++)
			result[ii] = (att / mergeShifts[ii]) % mergeSizes[ii];
		return result;
	}

	
	private String findAssignment(Integer[] attribute)
	{
		Integer[] result = new Integer[mergeSizes.length];
		
		for (int col = 0; col < mergeSizes.length; col++)
		{
			if (col == mergeSizesMaxIdx)
				result[col] = 0; // can be this bug
			else
			{
				int idx = attribute[mergeSizesMaxIdx] * mergeSizes[col] + attribute[col];
				result[col] = assignments.get(col)[idx];
			}
		}
		
		return Arrays.toString(result);
	}
	
	
	public void showExpansion()
	{
		int size = 0;
		for (int ii = 0; ii < paddedAttCount.length; ii++)
			size += paddedAttCount[ii];
		System.out.println("Expansion factor: " + (size / (float) db.length));
	}
	
	
	public void showMergeSizes()
	{
		System.out.println(Arrays.toString(mergeSizes));
	}
	
	
	public void showAlternativeExpansion()
	{
		float number = attCounts[0].getCount();
		for (int ii = 0; ii < mergeSizes.length; ii++)
			number *= mergeSizes[ii];
		System.out.println("Alternative expansion factor:" + (number / (float) db.length));
	}
	
}
